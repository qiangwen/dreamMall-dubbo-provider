<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:p="http://www.springframework.org/schema/p"
xmlns:tx="http://www.springframework.org/schema/tx" 
xmlns:context="http://www.springframework.org/schema/context" 
xmlns:mvc="http://www.springframework.org/schema/mvc" 
xsi:schemaLocation="  
    http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/aop     
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"  default-autowire="byName">
   <context:component-scan base-package="com.mall.dubbo" /> 
   <aop:aspectj-autoproxy />
   <bean id="aopDemoService" class="com.mall.dubbo.provider.AopDemoService" scope="prototype"></bean>
   
   <!-- <bean id="demoAspect" class="com.mall.dubbo.aop.DemoAspect" scope="prototype"></bean> -->
   <!-- 方法一 -->
  <!--  <aop:config>
   		<aop:aspect id="demoServiceAspect" ref="demoAspect">
   			<aop:pointcut expression="execution(* com.mall.dubbo.provider.AopDemoService.method1(..))" id="method1cut"/>
   			<aop:pointcut expression="execution(* com.mall.dubbo.provider.AopDemoService.method2(..))" id="method2cut"/>
   			<aop:before method="beforeMethod" pointcut-ref="method1cut"/>
   			<aop:after method="afterMethod" pointcut-ref="method2cut"/>
   		</aop:aspect>
   </aop:config> -->
   <!-- 方法二 -->
 <!--   <aop:config>
   		<aop:pointcut expression="execution(* com.mall.dubbo.provider.AopDemoService.method1(..))" id="method1cut"/>
   		<aop:pointcut expression="execution(* com.mall.dubbo.provider.AopDemoService.method2(..))" id="method2cut"/>
   		<aop:aspect id="demoServiceAspect" ref="demoAspect">
   			<aop:before method="beforeMethod" pointcut-ref="method1cut"/>
   			<aop:after method="afterMethod" pointcut-ref="method2cut"/>
   		</aop:aspect>
   </aop:config> -->
   <!-- 方法三 -->
   <!--   <aop:config>
   		<aop:pointcut expression="execution(* com.mall.dubbo.provider.AopDemoService.method1(..))" id="method1cut"/>
   		<aop:pointcut expression="execution(* com.mall.dubbo.provider.AopDemoService.method2(..))" id="method2cut"/>
   		<aop:aspect id="demoServiceAspect" ref="demoAspect">
   			<aop:after-throwing method="beforeMethod" pointcut="execution(* com.mall.dubbo.provider.AopDemoService.method1(..))"/>
   			<aop:after method="afterMethod" pointcut="execution(* com.mall.dubbo.provider.AopDemoService.method2(..))"/>
   		</aop:aspect>
   </aop:config> -->
   <!-- 方法四 -->
   <!--  <aop:config>
   		<aop:pointcut expression="execution(* com.mall.dubbo.provider.AopDemoService.method1(..))" id="method1cut"/>
   		<aop:pointcut expression="execution(* com.mall.dubbo.provider.AopDemoService.method2(..))" id="method2cut"/>
   		<aop:advisor advice-ref="method1Advice" pointcut-ref="method1cut" />
   </aop:config>
  <bean id="transactionManager" class="com.mall.dubbo.aop.DemoAspect" scope="prototype"/>
   <tx:advice id="method1Advice" transaction-manager="transactionManager">
   		<tx:attributes>
   			<tx:method name="save*" propagation="REQUIRED" />
   		</tx:attributes>
   </tx:advice> -->
   <!-- 
   	（1） advice（建议）的命名：由于每个模块都会有自己的Advice，所以在命名上需要作出规范，初步的构想就是模块名+Advice（只是一种命名规范）。
	（2） tx:attribute标签所配置的是作为事务的方法的命名类型。
                     如<tx:method name="save*" propagation="REQUIRED"/>
                     其中*为通配符，即代表以save为开头的所有方法，即表示符合此命名规则的方法作为一个事务。
         propagation="REQUIRED"代表支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
           （3） aop:pointcut标签配置参与事务的类，由于是在Service中进行数据库业务操作，配的应该是包含那些作为事务的方法的Service类。
                      首先应该特别注意的是id的命名，同样由于每个模块都有自己事务切面，所以我觉得初步的命名规则因为 all+模块名+ServiceMethod。而且每个模块之间不同之处还在于以下一句：
         expression="execution(* com.test.testAda.test.model.service.*.*(..))"
                      其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数。
           （4） aop:advisor标签就是把上面我们所配置的事务管理两部分属性整合起来作为整个事务管理。
    -->
</beans> 